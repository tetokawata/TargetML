---
title: "Example"
format: html
execute: 
  warning: false
  message: false
---

# SetUp

```{r SetUp}
set.seed(149)
pacman::p_load(
  tidyverse,
  mlr3verse,
  mlr3pipelines,
  mlr3extralearners,
  recipes
)
```

## Learner

```{r SetLearner}
Task <- as_task_regr(Raw, target = "Price") # Task設定

R2 <-  msr("regr.rsq") # R2で評価

CV <- rsmp("cv",folds = 2) # 2分割交差検証

Terminal = trm("evals",
               n_evals = 100) # 20回の繰り返し評価

Tuner <- tnr("grid_search",
             resolution = 100) # 20回のグリッドサーチ
Tree <- lrn("regr.rpart") |> 
  lts()

Tree <- AutoTuner$new(
  learner = Tree,
  resampling = CV,
  measure = R2,
  terminator = Terminal,
  tuner = Tuner
  )

Tree$id <- "Tree"

```

# Data

```{r CleanData}
TargetStructure <- c("ＳＲＣ","ＲＣ")

TargetRoom <- c("オープンフロア","スタジオ","メゾネット")

Raw <- arrow::read_parquet("~/Dropbox/DataClean/RetailJPN/AllPrefectture.parquet") |> 
  filter(今後の利用目的 == "住宅") |> 
  filter(用途 == "住宅") |> 
  filter(改装 != "") |> 
  filter(間取り != "") |> 
  filter(都市計画 != "") |> 
  filter(最寄駅.名称 != "") |> 
  filter(都道府県名 == "東京都") |> 
  filter(str_detect(市区町村名, "区")) |> 
  filter(建物の構造 %in% TargetStructure) |> 
  filter(!(間取り %in% TargetRoom)) |> 
  mutate(TradePeriod = str_sub(取引時点,1,4) |> 
           as.numeric()
         ) |> 
  filter(TradePeriod %in% c(2017,2021)) |> 
  mutate(
    TempBuildYear = 
      str_sub(建築年,3,-2) |> 
      as.numeric(),
    TempGengo = str_sub(建築年,1,2)
    ) |> 
  mutate(
    BuildYear = if_else(
      TempGengo == "令和",
      TempBuildYear + 2018,
      TempBuildYear
      )
  ) |> 
  mutate(
    BuildYear = if_else(
      TempGengo == "平成",
      TempBuildYear + 1988,
      BuildYear
      )
  ) |> 
  mutate(
    BuildYear = if_else(
      TempGengo == "昭和",
      TempBuildYear + 1925,
      BuildYear
      )
  ) |> 
  mutate(
    Price = 取引価格.総額./(10^6),
    Tenure = TradePeriod - BuildYear,
    DistanceStation = 最寄駅.距離.分. |> as.numeric(),
    Size = 面積... |> as.numeric(),
    Youseki = 容積率... |> as.numeric(),
    Kenpei = 建ぺい率... |> as.numeric(),
    RoomNum = if_else(str_detect(間取り,"１"),1,0),
    RoomNum = if_else(str_detect(間取り,"２"),2,RoomNum),
    RoomNum = if_else(str_detect(間取り,"３"),3,RoomNum),
    RoomNum = if_else(str_detect(間取り,"４"),4,RoomNum),
    RoomNum = if_else(str_detect(間取り,"５"),5,RoomNum),
    RoomNum = if_else(str_detect(間取り,"６"),6,RoomNum),
    ZoneHouse = if_else(str_detect(都市計画,"住居"),1,0),
    ZoneBusiness = if_else(str_detect(都市計画,"商業"),1,0),
    ZoneFactory = if_else(str_detect(都市計画,"工業"),1,0),
    RoomK = if_else(str_detect(間取り,"Ｋ"),1,0),
    RoomL = if_else(str_detect(間取り,"Ｌ"),1,0),
    RoomD = if_else(str_detect(間取り,"Ｄ"),1,0),
    RoomS = if_else(str_detect(間取り,"Ｓ"),1,0),
    StructureSRC = if_else(建物の構造 == "ＳＲＣ",1,0),
    After = if_else(
      TradePeriod == 2021,
        1,
        0
    ),
    Reform = if_else(改装 == "改装済",1,0),
    District = 市区町村名
  ) |> 
  select(Price:District) |> 
  na.omit()

Data <- recipe(
  ~.,
  Raw
  ) |> 
  step_scale(
    Tenure,
    DistanceStation,
    Size,
    Youseki,
    Kenpei,
    RoomNum
  ) |> 
  step_dummy(District) |> 
  prep() |> 
  bake(new_data = NULL)

X <- Data |> 
  select(
    -Reform,
    -Price
  )

NameX <- names(X)
names(X) <- str_c("X",1:ncol(X))

Y <- Data$Price

D <- Data$Reform
```


# Task


```{r}
TaskY <- as_task_regr(
  X |> 
    mutate(Y),
  target = "Y",
  id = "Y"
  )

TaskD <- as_task_regr(
  X |> 
    mutate(D),
  target = "D",
  id = "D"
  )

Design <- benchmark_grid(
  tasks = list(
    TaskY,
    TaskD
  ),
  learners = list(
    Tree,
    lrn("regr.rpart")
  ),
  resamplings = rsmp("holdout")
)

lgr::get_logger("mlr3")$set_threshold("error") # Errorのみを表示
lgr::get_logger("bbotk")$set_threshold("error") # Errorのみを表示
future::plan("multisession") # 並列処理

BenchMark <- benchmark(Design)

BenchMark$aggregate(msr("regr.rsq"))
```

# Tree

```{r}
Tree <- lrn("regr.rpart")

Tree$train(TaskY)

Tree$model |> 
  rpart.plot::rpart.plot()

NameX
```


```{r}
FitTree <- Tree$clone()$train(TaskY)

FitTree$model |> 
  rpart.plot::rpart.plot()
```


```{r}
lrn("regr.rpart")$train(TaskD)$model |> 
  rpart.plot::rpart.plot()
```


```{r}
FitTree <- Tree$train(TaskD)

FitTree$model |> 
  rpart.plot::rpart.plot()

NameX
```