---
title: "Simulation"
format: html
execute:
  echo: false
  warning: false
  message: false
---

# SetUp

```{r SetUp}
set.seed(1)
pacman::p_load(
  tidyverse,
  mlr3verse,
  mlr3pipelines,
  patchwork,
  DoubleML
)

lgr::get_logger("mlr3")$set_threshold("error") # Errorのみを表示
lgr::get_logger("bbotk")$set_threshold("error") # Errorのみを表示
```


## Learner

- OLS

- Quadratic OLS

- SuperLearner with Quadratic OLS and RandomForest

- SuperLeraner with Linear OLS and RandomForest

- SuperLearner with Quadratic OLS, RandomForest, Boosting, and BART

```{r SetLearner}
MutateCollect = po("mutate") # データ加工

MutateCollect$param_set$values$mutation = list(
  X_2 = ~ X*X,
  I1 = ~if_else(X<=-2,1,0),
  I2 = ~if_else(X<=0,1,0),
  I3 = ~if_else(X<=2,1,0)
) # 二乗項と交差項の作成

Mutate = po("mutate") # データ加工

Mutate$param_set$values$mutation = list(
  X_2 = ~ X*X
) # 二乗項と交差項の作成

Scale = po("scale")

OLS <-  Mutate %>>% 
  Scale %>>% 
  lrn(
  "regr.lm",
  id = "RegLM"
  ) |> 
  as_learner()

CorrectOLS <-  MutateCollect %>>% 
  Scale %>>% 
  lrn(
  "regr.lm",
  id = "RegLM_Correct"
  ) |> 
  as_learner()

RandomForest <- lrn(
  "regr.ranger",
  id = "RefRF",
  verbose = FALSE
  )


BART <- lrn(
  "regr.bart",
  id = "BART",
  verbose = FALSE
)

Boost <- lrn(
  "regr.xgboost",
  early_stopping_set = "test",
  eta = 0.01,
  early_stopping_rounds = 100,
  nrounds = 10000
  )

SLSimple <- pipeline_stacking(
  list(
  lrn("regr.lm"),
  RandomForest
  ), 
  lrn(
  "regr.lm",
  id = "RegSL"
  ),
  use_features = FALSE,
  folds = 2) |> 
  as_learner()


SL <- pipeline_stacking(
  list(
  OLS,
  RandomForest
  ), 
  lrn(
  "regr.lm",
  id = "RegSL"
  ),
  use_features = FALSE,
  folds = 2) |> 
  as_learner()


SLExtra <- pipeline_stacking(
  list(
  OLS,
  RandomForest,
  Boost,
  BART
  ), 
  lrn(
  "regr.lm",
  id = "RegSL"
  ),
  use_features = FALSE,
  folds = 2) |> 
  as_learner()

```

### Classification

```{r}
SLSimpleClassif <- pipeline_stacking(
  list(
    lrn(
      "classif.log_reg",
      predict_type = "prob"
      ),
    lrn(
      "classif.ranger",
      predict_type = "prob"
      )
    ), 
  lrn(
  "classif.log_reg",
  id = "RegSL"
  ),
  use_features = FALSE,
  folds = 2) |> 
  as_learner()

```


# Data

```{r Data}
CorrectFormula <- 
  formula(
    y ~ I(x^2) + if_else(x <= -2,JumpY,0) + 
      if_else(x <= -0,JumpY,0) + if_else(x <= 2,JumpY,0)
  )


JumpY <- 3
Nosice <- 10
Sim <- function(i,n){
  set.seed(i)
  X <- runif(n,-5,5)
  D <- if_else(
    X >= -1 & X <= 1,
    sample(0:1,n,replace = TRUE, prob = c(0.1,0.9)),
    sample(0:1,n,replace = TRUE, prob = c(0.9,0.1))
  )
  Y <- X^2 + if_else(X <= -2,JumpY,0) + 
    if_else(X <= -0,JumpY,0) + if_else(X <= 2,JumpY,0) + 
    D + rnorm(n,0,Nosice)
  TrueY <- X^2 + if_else(X <= -2,JumpY,0) + 
    if_else(X <= -0,JumpY,0) + if_else(X <= 2,JumpY,0) + 
    D
  Temp <- tibble(X,D,Y,TrueY)
  return(Temp)
}

SimIndepend <- function(i,n){
  set.seed(i)
  X <- runif(n,-5,5)
  D <- sample(0:1,n,replace = TRUE)
  Y <- X^2 + if_else(X <= -2,JumpY,0) + 
    if_else(X <= -0,JumpY,0) + if_else(X <= 2,JumpY,0) + 
    D + rnorm(n,0,Nosice)
  TrueY <- X^2 + if_else(X <= -2,JumpY,0) + 
    if_else(X <= -0,JumpY,0) + if_else(X <= 2,JumpY,0) + 
    D
  Temp <- tibble(X,D,Y,TrueY)
  return(Temp)
}

Test <- 
  tibble(
    X = rep(seq(-5,5,0.01),2) |> as.numeric(),
    D = c(rep(0,1001),rep(1,1001)) |> as.integer(),
    Y = X^2 + if_else(X <= -2,JumpY,0) + 
      if_else(X <= -0,JumpY,0) + if_else(X <= 2,JumpY,0) + 
      D
    )

TaskTest <- as_task_regr(
  Test,
  "Y"
)
```

## Example

```{r ExampleData}
Sim(1,500) |> 
  ggplot(
    aes(
      x = X,
      y = Y,
      color = D |> 
        factor()
    )
  ) +
  theme_bw() +
  geom_point()
```

# Define Task

```{r DefineTask}
Task <- as_task_regr(
  Sim(1,5000) |> 
    select(-TrueY),
  "Y"
  )

Task$set_row_roles(
  sample(
    1:nrow(Sim(1,5000)),
    500),
  "test")

```


# SL

```{r FitSL}

TempPred <- function(i){
  Task <- as_task_regr(
    Sim(i,5000) |> 
      select(-TrueY),
    "Y"
  )
  Pred <- SL$clone()$train(Task)$predict(TaskTest)$response
  return(Pred)
}

Fig1 <- Test |> 
  mutate(
    D = D |> 
      factor()
    ) |> 
  ggplot(
    aes(
      x = X,
      y = Y,
      color = D,
      group = D
    )
  ) +
  theme_bw() +
  geom_smooth(
    method = "lm",
    formula = CorrectFormula
  ) +
  ylim(0,40)

Fig2 <- Test |> 
  mutate(
    D = D |> 
      factor()
    ) |> 
  mutate(
    Pred = TempPred(1)
  ) |> 
  ggplot(
    aes(
      x = X,
      y = Pred,
      color = D
    )
  ) +
  theme_bw() +
  geom_line() +
  ylim(0,40) +
  theme(
    legend.position = "none"
  ) +
  xlab("") +
  ylab("")

Fig3 <- Test |> 
  mutate(
    D = D |> 
      factor()
    ) |> 
  mutate(
    Pred = TempPred(2)
  ) |> 
  ggplot(
    aes(
      x = X,
      y = Pred,
      color = D
    )
  ) +
  theme_bw() +
  geom_line() +
  ylim(0,40) +
  theme(
    legend.position = "none"
  ) +
  xlab("") +
  ylab("")

Fig4 <- Test |> 
  mutate(
    D = D |> 
      factor()
    ) |> 
  mutate(
    Pred = TempPred(3)
  ) |> 
  ggplot(
    aes(
      x = X,
      y = Pred,
      color = D
    )
  ) +
  theme_bw() +
  geom_line() +
  ylim(0,40) +
  theme(
    legend.position = "none"
  ) +
  xlab("") +
  ylab("")

Fig5 <- Test |> 
  mutate(
    D = D |> 
      factor()
    ) |> 
  mutate(
    Pred = TempPred(4)
  ) |> 
  ggplot(
    aes(
      x = X,
      y = Pred,
      color = D
    )
  ) +
  theme_bw() +
  geom_line() +
  ylim(0,40) +
  theme(
    legend.position = "none"
  ) +
  xlab("") +
  ylab("")


Fig1 + ((Fig2 + Fig3)/(Fig4 + Fig5))
```



# SL Simple

```{r FitSLSimple}

TempPred <- function(i){
  Task <- as_task_regr(
    Sim(i,5000) |> 
      select(-TrueY),
    "Y"
  )
  Pred <- SLSimple$clone()$train(Task)$predict(TaskTest)$response
  return(Pred)
}

Fig1 <- Test |> 
  mutate(
    D = D |> 
      factor()
    ) |> 
  ggplot(
    aes(
      x = X,
      y = Y,
      color = D,
      group = D
    )
  ) +
  theme_bw() +
  geom_smooth(
    method = "lm",
    formula = CorrectFormula
  ) +
  ylim(0,40)

Fig2 <- Test |> 
  mutate(
    D = D |> 
      factor()
    ) |> 
  mutate(
    Pred = TempPred(1)
  ) |> 
  ggplot(
    aes(
      x = X,
      y = Pred,
      color = D
    )
  ) +
  theme_bw() +
  geom_line() +
  ylim(0,40) +
  theme(
    legend.position = "none"
  ) +
  xlab("") +
  ylab("")

Fig3 <- Test |> 
  mutate(
    D = D |> 
      factor()
    ) |> 
  mutate(
    Pred = TempPred(2)
  ) |> 
  ggplot(
    aes(
      x = X,
      y = Pred,
      color = D
    )
  ) +
  theme_bw() +
  geom_line() +
  ylim(0,40) +
  theme(
    legend.position = "none"
  ) +
  xlab("") +
  ylab("")

Fig4 <- Test |> 
  mutate(
    D = D |> 
      factor()
    ) |> 
  mutate(
    Pred = TempPred(3)
  ) |> 
  ggplot(
    aes(
      x = X,
      y = Pred,
      color = D
    )
  ) +
  theme_bw() +
  geom_line() +
  ylim(0,40) +
  theme(
    legend.position = "none"
  ) +
  xlab("") +
  ylab("")

Fig5 <- Test |> 
  mutate(
    D = D |> 
      factor()
    ) |> 
  mutate(
    Pred = TempPred(4)
  ) |> 
  ggplot(
    aes(
      x = X,
      y = Pred,
      color = D
    )
  ) +
  theme_bw() +
  geom_line() +
  ylim(0,40) +
  theme(
    legend.position = "none"
  ) +
  xlab("") +
  ylab("")


Fig1 + ((Fig2 + Fig3)/(Fig4 + Fig5))
```


# ExtraLearner

```{r FitSLExtra}

TempPred <- function(i){
  Task <- as_task_regr(
    Sim(i,5000) |> 
      select(-TrueY),
    "Y"
  )
  Task$set_row_roles(
    sample(
      1:nrow(Sim(1,5000)),
      500),
    "test")
  Pred <- SLExtra$clone()$train(Task)$predict(TaskTest)$response
  return(Pred)
}

Fig1 <- Test |> 
  mutate(
    D = D |> 
      factor()
    ) |> 
  ggplot(
    aes(
      x = X,
      y = Y,
      color = D,
      group = D
    )
  ) +
  theme_bw() +
  geom_smooth(
    method = "lm",
    formula = CorrectFormula
  ) +
  ylim(0,40)

Fig2 <- Test |> 
  mutate(
    D = D |> 
      factor()
    ) |> 
  mutate(
    Pred = TempPred(1)
  ) |> 
  ggplot(
    aes(
      x = X,
      y = Pred,
      color = D
    )
  ) +
  theme_bw() +
  geom_line() +
  ylim(0,40) +
  theme(
    legend.position = "none"
  ) +
  xlab("") +
  ylab("")

Fig3 <- Test |> 
  mutate(
    D = D |> 
      factor()
    ) |> 
  mutate(
    Pred = TempPred(2)
  ) |> 
  ggplot(
    aes(
      x = X,
      y = Pred,
      color = D
    )
  ) +
  theme_bw() +
  geom_line() +
  ylim(0,40) +
  theme(
    legend.position = "none"
  ) +
  xlab("") +
  ylab("")

Fig4 <- Test |> 
  mutate(
    D = D |> 
      factor()
    ) |> 
  mutate(
    Pred = TempPred(3)
  ) |> 
  ggplot(
    aes(
      x = X,
      y = Pred,
      color = D
    )
  ) +
  theme_bw() +
  geom_line() +
  ylim(0,40) +
  theme(
    legend.position = "none"
  ) +
  xlab("") +
  ylab("")

Fig5 <- Test |> 
  mutate(
    D = D |> 
      factor()
    ) |> 
  mutate(
    Pred = TempPred(4)
  ) |> 
  ggplot(
    aes(
      x = X,
      y = Pred,
      color = D
    )
  ) +
  theme_bw() +
  geom_line() +
  ylim(0,40) +
  theme(
    legend.position = "none"
  ) +
  xlab("") +
  ylab("")


Fig1 + ((Fig2 + Fig3)/(Fig4 + Fig5))
```


# OLS

```{r FitOLS}
TempPred <- function(i){
  Task <- as_task_regr(
    Sim(i,5000) |> 
      select(-TrueY),
    "Y"
  )
  Pred <- lrn("regr.lm")$train(Task)$predict(TaskTest)$response
  return(Pred)
}

Fig1 <- Test |> 
  mutate(
    D = D |> 
      factor()
    ) |> 
  ggplot(
    aes(
      x = X,
      y = Y,
      color = D,
      group = D
    )
  ) +
  theme_bw() +
  geom_smooth(
    method = "lm",
    formula = CorrectFormula
  ) +
  ylim(0,40)

Fig2 <- Test |> 
  mutate(
    D = D |> 
      factor()
    ) |> 
  mutate(
    Pred = TempPred(1)
  ) |> 
  ggplot(
    aes(
      x = X,
      y = Pred,
      color = D
    )
  ) +
  theme_bw() +
  geom_line() +
  ylim(0,40) +
  theme(
    legend.position = "none"
  ) +
  xlab("") +
  ylab("")

Fig3 <- Test |> 
  mutate(
    D = D |> 
      factor()
    ) |> 
  mutate(
    Pred = TempPred(2)
  ) |> 
  ggplot(
    aes(
      x = X,
      y = Pred,
      color = D
    )
  ) +
  theme_bw() +
  geom_line() +
  ylim(0,40) +
  theme(
    legend.position = "none"
  ) +
  xlab("") +
  ylab("")

Fig4 <- Test |> 
  mutate(
    D = D |> 
      factor()
    ) |> 
  mutate(
    Pred = TempPred(3)
  ) |> 
  ggplot(
    aes(
      x = X,
      y = Pred,
      color = D
    )
  ) +
  theme_bw() +
  geom_line() +
  ylim(0,40) +
  theme(
    legend.position = "none"
  ) +
  xlab("") +
  ylab("")

Fig5 <- Test |> 
  mutate(
    D = D |> 
      factor()
    ) |> 
  mutate(
    Pred = TempPred(4)
  ) |> 
  ggplot(
    aes(
      x = X,
      y = Pred,
      color = D
    )
  ) +
  theme_bw() +
  geom_line() +
  ylim(0,40) +
  theme(
    legend.position = "none"
  ) +
  xlab("") +
  ylab("")


Fig1 + ((Fig2 + Fig3)/(Fig4 + Fig5))
```

# Correct OLS

```{r FitCorrectOLS}
TempPred <- function(i){
  Task <- as_task_regr(
    Sim(i,5000) |> 
      select(-TrueY),
    "Y"
  )
  Pred <- CorrectOLS$clone()$train(Task)$predict(TaskTest)$response
  return(Pred)
}

Fig1 <- Test |> 
  mutate(
    D = D |> 
      factor()
    ) |> 
  ggplot(
    aes(
      x = X,
      y = Y,
      color = D,
      group = D
    )
  ) +
  theme_bw() +
  geom_smooth(
    method = "lm",
    formula = CorrectFormula
  ) +
  ylim(0,40)

Fig2 <- Test |> 
  mutate(
    D = D |> 
      factor()
    ) |> 
  mutate(
    Pred = TempPred(1)
  ) |> 
  ggplot(
    aes(
      x = X,
      y = Pred,
      color = D
    )
  ) +
  theme_bw() +
  geom_line() +
  ylim(0,40) +
  theme(
    legend.position = "none"
  ) +
  xlab("") +
  ylab("")

Fig3 <- Test |> 
  mutate(
    D = D |> 
      factor()
    ) |> 
  mutate(
    Pred = TempPred(2)
  ) |> 
  ggplot(
    aes(
      x = X,
      y = Pred,
      color = D
    )
  ) +
  theme_bw() +
  geom_line() +
  ylim(0,40) +
  theme(
    legend.position = "none"
  ) +
  xlab("") +
  ylab("")

Fig4 <- Test |> 
  mutate(
    D = D |> 
      factor()
    ) |> 
  mutate(
    Pred = TempPred(3)
  ) |> 
  ggplot(
    aes(
      x = X,
      y = Pred,
      color = D
    )
  ) +
  theme_bw() +
  geom_line() +
  ylim(0,40) +
  theme(
    legend.position = "none"
  ) +
  xlab("") +
  ylab("")

Fig5 <- Test |> 
  mutate(
    D = D |> 
      factor()
    ) |> 
  mutate(
    Pred = TempPred(4)
  ) |> 
  ggplot(
    aes(
      x = X,
      y = Pred,
      color = D
    )
  ) +
  theme_bw() +
  geom_line() +
  ylim(0,40) +
  theme(
    legend.position = "none"
  ) +
  xlab("") +
  ylab("")


Fig1 + ((Fig2 + Fig3)/(Fig4 + Fig5))
```

# DoubleML

```{r}
i <- 1
TempPred <- function(i){
  TempData <- Sim(i,5000)
  Task <- double_ml_data_from_matrix(
    X = TempData |> 
      select(X),
    d = TempData$D,
    y = TempData$Y
  )
  Param <- DoubleMLPLR$new(
    Task,
    SLSimple$clone(),
    SLSimple$clone()
    )$fit(
    store_prediction = TRUE,
    store_model = TRUE)
  Coef <- Param$coef
  PredY <- Param$predictions$ml_l[,1,1]
  PredD <- Param$predictions$ml_m[,1,1]
  Pred <- tibble(
    Pred = Coef*(TempData$D - PredD) + PredY,
    X = TempData$X,
    D = TempData$D
  )
  return(Pred)
}

Temp <- TempPred(1)

Fig2 <- Temp |> 
  mutate(D = D |> 
           factor()
         ) |> 
  ggplot(
    aes(
      x = X,
      y = Pred,
      color = D
    )
  ) +
  theme_bw() +
  geom_line(
    alpha = 0.5
  ) +
  ylim(0,40) +
  theme(
    legend.position = "none"
  ) +
  xlab("") +
  ylab("")

Fig2
```

