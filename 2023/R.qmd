---
title: "Example"
format: html
---

# SetUp

```{r SetUp}
set.seed(149)
pacman::p_load(
  tidyverse,
  mlr3verse,
  mlr3pipelines,
  mlr3extralearners,
  recipes
)
```

## Learner

```{r SetLearner}
R2 <-  msr("regr.rsq") # R2で評価

CV <- rsmp(
  "holdout",
  ratio = 0.8) # 2分割交差検証

Terminal = trm("evals",
               n_evals = 20) # 20回の繰り返し評価

Tuner <- tnr("grid_search",
             resolution = 20) # 20回のグリッドサーチ

Mutate = po("mutate") # データ加工

Mutate$param_set$values$mutation = list(
  X1_2 = ~ X1*X1,
  X2_2 = ~ X2*X2,
  X3_2 = ~ X3*X3,
  X4_2 = ~ X4*X4,
  X5_2 = ~ X5*X5,
  X6_2 = ~ X6*X6
) # 二乗項と交差項の作成

Scale = po("scale")

RegLM <-  Mutate %>>% 
  Scale %>>% 
  lrn(
  "regr.lm",
  id = "RegLM"
  ) |> 
  as_learner()

RegRF <- lrn(
  "regr.ranger",
  id = "RefRF"
  )

RegBART <- lrn(
  "regr.bart",
  id = "BART"
)

RegLASSO <- lrn("regr.glmnet") |> 
  lts()

RegLASSO <- Mutate %>>% 
  Scale %>>% 
  RegLASSO |> 
  as_learner()

RegLASSO <- AutoTuner$new(
  learner = RegLASSO,
  resampling = CV,
  measure = R2,
  terminator = Terminal,
  tuner = Tuner
  )

RegLASSO$id <- "RegLASSO"

RegSL <- lrn(
  "regr.lm",
  id = "RegSL"
  )

RegNuisanceLearner <- pipeline_stacking(
  list(
  RegRF,
  RegLM,
  RegBART,
  RegLASSO
  ), 
  RegSL,
  use_features = FALSE,
  folds = 2) |> 
  as_learner()
```


# Data

```{r}
Raw <- arrow::read_parquet(
  "Data/AllPrefecture.parquet"
  ) |> 
  filter(
    今後の利用目的 == "住宅"
  ) |> 
  filter(用途 == "住宅") |> 
  filter(改装 != "") |> 
  filter(間取り != "") |> 
  filter(都市計画 != "") |> 
  filter(都道府県名 == "東京都") |> 
  filter(str_detect(市区町村名, "区")) |> 
  filter(
    建物の構造 == "ＳＲＣ" |
      建物の構造 == "ＲＣ"
  ) |> 
  filter(
    間取り != "オープンフロア"
  ) |> 
  filter(
    間取り != "スタジオ"
  ) |> 
  filter(
    間取り != "メゾネット"
  ) |> 
  mutate(
    TempBuildYear = 
      str_sub(建築年,3,-2) |> 
      as.numeric(),
    TempGengo = str_sub(建築年,1,2)
    ) |> 
  mutate(
    BuildYear = if_else(
      TempGengo == "令和",
      TempBuildYear + 2018,
      TempBuildYear
      )
  ) |> 
  mutate(
    BuildYear = if_else(
      TempGengo == "平成",
      TempBuildYear + 1988,
      BuildYear
      )
  ) |> 
  mutate(
    BuildYear = if_else(
      TempGengo == "昭和",
      TempBuildYear + 1925,
      BuildYear
      )
  ) |> 
  mutate(
    Price = 取引価格.総額./(10^6),
    DistanceStation = 最寄駅.距離.分. |> as.numeric(),
    Size = 面積... |> as.numeric(),
    Youseki = 容積率... |> as.numeric(),
    Kenpei = 建ぺい率... |> as.numeric(),
    RoomNum = if_else(str_detect(間取り,"１"),1,0),
    RoomNum = if_else(str_detect(間取り,"２"),2,RoomNum),
    RoomNum = if_else(str_detect(間取り,"３"),3,RoomNum),
    RoomNum = if_else(str_detect(間取り,"４"),4,RoomNum),
    RoomNum = if_else(str_detect(間取り,"５"),5,RoomNum),
    RoomNum = if_else(str_detect(間取り,"６"),6,RoomNum),
    ZoneHouse = if_else(str_detect(都市計画,"住居"),1,0),
    ZoneBusiness = if_else(str_detect(都市計画,"商業"),1,0),
    ZoneFactory = if_else(str_detect(都市計画,"工業"),1,0),
    RoomK = if_else(str_detect(間取り,"Ｋ"),1,0),
    RoomL = if_else(str_detect(間取り,"Ｌ"),1,0),
    RoomD = if_else(str_detect(間取り,"Ｄ"),1,0),
    RoomS = if_else(str_detect(間取り,"Ｓ"),1,0),
    StructureSRC = if_else(建物の構造 == "ＳＲＣ",1,0),
    PostCOVID = if_else(
      str_detect(取引時点,"2021"),
        1,
        0
    ),
    District = 市区町村名,
    Reform = if_else(改装 == "改装済",1,0)
  ) |> 
  select(BuildYear:Reform) |> 
  na.omit()

Data <- recipe(
  ~.,
  Raw
  ) |> 
  step_scale(
    Size,
    Youseki,
    Kenpei,
    BuildYear
  ) |> 
  step_dummy(District) |> 
  prep() |> 
  bake(new_data = NULL)


X <- Data |> 
  select(
    -Price,
    -PostCOVID
  )

NameX <- names(X)
names(X) <- str_c("X",1:ncol(X))

Y <- Data$Price

D <- Data$PostCOVID
```

# OLS

```{r}
estimatr::lm_robust(
  Price ~ PostCOVID + .,
  Data
  ) |> 
  generics::tidy() |> 
  filter(term == "PostCOVID")
```

# Double ML with OLS

```{r}
Task <- DoubleML::double_ml_data_from_matrix(
  X = X,
  y = Y,
  d = D
)

DML_OLS <- DoubleML::DoubleMLPLR$new(
  Task,
  lrn("regr.lm"),
  lrn("regr.lm"),
  n_folds = 2
  )

DML_OLS$fit(store_predictions = TRUE)


```


# Double ML

```{r}
Task <- DoubleML::double_ml_data_from_matrix(
  X = X,
  y = Y,
  d = D
)

DML <- DoubleML::DoubleMLPLR$new(
  Task,
  RegNuisanceLearner$clone(),
  RegNuisanceLearner$clone(),
  n_folds = 2
  )

DML$fit(store_predictions = TRUE)

DML
```

# Comparison

```{r}
DML_OLS

DML
```


```{r}
1 - (mean((Y - DML$predictions$ml_l)^2)/var(Y))
1 - (mean((Y - DML_OLS$predictions$ml_l)^2)/var(Y))

1 - (mean((D - DML$predictions$ml_m)^2)/var(D))
1 - (mean((D - DML_OLS$predictions$ml_m)^2)/var(D))

```

