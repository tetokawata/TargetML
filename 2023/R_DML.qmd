---
title: "Example"
format: html
execute: 
  warning: false
  message: false
---

# SetUp

```{r SetUp}
set.seed(149)
pacman::p_load(
  tidyverse,
  mlr3verse,
  mlr3pipelines,
  mlr3extralearners,
  recipes
)


lgr::get_logger("mlr3")$set_threshold("error")
lgr::get_logger("bbotk")$set_threshold("error")
```

## Learner

```{r SetLearner}
RegLM <-　lrn(
  "regr.lm",
  id = "LM"
  ) |> 
  as_learner()

Mutate <- po("mutate")

Mutate$param_set$values$mutation = list(
  X1_2 = ~ X1*X1,
  X2_2 = ~ X2*X2,
  X3_2 = ~ X3*X3,
  X4_2 = ~ X4*X4,
  X5_2 = ~ X5*X5,
  X6_2 = ~ X6*X6
) # 二乗項と交差項の作成

Scale = po("scale")


RegIntLM <-　Mutate %>>%
  Scale %>>% lrn(
  "regr.lm",
  id = "LM"
  ) |> 
  as_learner()

RegRF <- lrn(
  "regr.ranger",
  id = "RF"
  )

RegMean <- lrn(
  "regr.featureless",
  id = "Mean"
)

RegStack <- pipeline_stacking(
  list(
  RegRF,
  RegIntLM
  ), 
  lrn(
  "regr.lm",
  id = "Aggregate"
  ),
  use_features = FALSE,
  folds = 2) |> 
  as_learner()

RegStack$id <- "Stacking"
```


# Data

```{r CleanData}
TargetStructure <- c("ＳＲＣ","ＲＣ")

TargetRoom <- c("オープンフロア","スタジオ","メゾネット")

Raw <- arrow::read_parquet("~/Dropbox/DataClean/RetailJPN/AllPrefectture.parquet") |> 
  filter(今後の利用目的 == "住宅") |> 
  filter(用途 == "住宅") |> 
  filter(改装 != "") |> 
  filter(間取り != "") |> 
  filter(都市計画 != "") |> 
  filter(最寄駅.名称 != "") |> 
  filter(都道府県名 == "東京都") |> 
  filter(str_detect(市区町村名, "区")) |> 
  filter(建物の構造 %in% TargetStructure) |> 
  filter(!(間取り %in% TargetRoom)) |> 
  mutate(TradePeriod = str_sub(取引時点,1,4) |> 
           as.numeric()
         ) |> 
  filter(TradePeriod %in% c(2019,2021)) |> 
  mutate(
    TempBuildYear = 
      str_sub(建築年,3,-2) |> 
      as.numeric(),
    TempGengo = str_sub(建築年,1,2)
    ) |> 
  mutate(
    BuildYear = if_else(
      TempGengo == "令和",
      TempBuildYear + 2018,
      TempBuildYear
      )
  ) |> 
  mutate(
    BuildYear = if_else(
      TempGengo == "平成",
      TempBuildYear + 1988,
      BuildYear
      )
  ) |> 
  mutate(
    BuildYear = if_else(
      TempGengo == "昭和",
      TempBuildYear + 1925,
      BuildYear
      )
  ) |> 
  mutate(
    Price = 取引価格.総額./(10^6),
    Tenure = TradePeriod - BuildYear,
    DistanceStation = 最寄駅.距離.分. |> as.numeric(),
    Size = 面積... |> as.numeric(),
    Youseki = 容積率... |> as.numeric(),
    Kenpei = 建ぺい率... |> as.numeric(),
    RoomNum = if_else(str_detect(間取り,"１"),1,0),
    RoomNum = if_else(str_detect(間取り,"２"),2,RoomNum),
    RoomNum = if_else(str_detect(間取り,"３"),3,RoomNum),
    RoomNum = if_else(str_detect(間取り,"４"),4,RoomNum),
    RoomNum = if_else(str_detect(間取り,"５"),5,RoomNum),
    RoomNum = if_else(str_detect(間取り,"６"),6,RoomNum),
    ZoneHouse = if_else(str_detect(都市計画,"住居"),1,0),
    ZoneBusiness = if_else(str_detect(都市計画,"商業"),1,0),
    ZoneFactory = if_else(str_detect(都市計画,"工業"),1,0),
    RoomL = if_else(str_detect(間取り,"Ｌ"),1,0),
    RoomD = if_else(str_detect(間取り,"Ｄ"),1,0),
    StructureSRC = if_else(建物の構造 == "ＳＲＣ",1,0),
    After = if_else(
      TradePeriod == 2021,
        1,
        0
    ),
    Reform = if_else(改装 == "改装済",1,0),
    District = 市区町村コード |> 
      factor()
  ) |> 
  select(Price:District) |> 
  na.omit()

Data <- recipe(
  ~.,
  Raw
  ) |> 
  step_filter(Tenure >= 0) |> 
  step_filter(Size >= 15) |> 
  step_filter(Size <= 110) |> 
  step_filter(Tenure <= 50) |> 
  step_filter(DistanceStation <= 20) |> 
  step_filter(Youseki <= 700) |> 
  step_filter(RoomNum <= 4) |> 
  step_scale(
    Tenure,
    DistanceStation,
    Size,
    Youseki,
    Kenpei,
    RoomNum
  ) |> 
  step_mutate(
    Price = Price |> log()
  ) |> 
  step_dummy(District) |> 
  prep() |> 
  bake(new_data = NULL)

Group <- sample(
  1:3,
  nrow(Data),
  replace = TRUE
  )

X <- Data |> 
  select(
    -After,
    -Price
  )

NameX <- names(X)

Y <- Data$Price

D <- Data$After
```

# Estimation


```{r}
Task <- DoubleML::double_ml_data_from_matrix(
  X = X,
  y = Y,
  d = D
  )
```



```{r}
FitNoControl <- DoubleML::DoubleMLPLR$new(
  Task,
  RegMean$clone(),
  RegMean$clone(),
  n_folds = 1,
  apply_cross_fitting = FALSE
  )

FitOLS <- DoubleML::DoubleMLPLR$new(
  Task,
  RegLM$clone(),
  RegLM$clone(),
  n_folds = 1,
  apply_cross_fitting = FALSE
  )

FitDML <- DoubleML::DoubleMLPLR$new(
  Task,
  RegStack$clone(),
  RegStack$clone(),
  n_folds = 2
  )

FitNoControl$fit(
  store_predictions = TRUE
  )

FitOLS$fit(
  store_predictions = TRUE
  )


FitDML$fit(
  store_predictions = TRUE
  )

```

# Result

```{r}
FitDML$summary()
FitOLS
FitNoControl

tibble(
  estimate = FitNoControl$coef,
  std.error = FitNoControl$se,
  Method = "No Control"
  ) |> 
  bind_rows(
    tibble(
      estimate = FitOLS$coef,
      std.error = FitOLS$se,
      Method = "OLS"
  )
  ) |> 
  bind_rows(
    tibble(
      estimate = FitDML$coef,
      std.error = FitDML$se,
      Method = "DML with Stacking"
    )
  ) |> 
  ggplot(
    aes(
      y = Method,
      x = estimate,
      xmin = estimate - 1.96*std.error,
      xmax = estimate + 1.96*std.error
    )
  ) +
  theme_bw() +
  geom_pointrange()
```


# BLP

```{r}
Q <- qnorm(1 - (0.05/(2*11)))

DefineFormula <- formula(
  Y ~ 0 + D + Size + Tenure + DistanceStation + StructureSRC + Reform + RoomNum + RoomL + RoomD + Kenpei + Youseki
  )
estimatr::lm_robust(
  DefineFormula,
  tibble(
    Y = Y - FitDML$predictions$ml_l[,1,1],
    D = D - FitDML$predictions$ml_m[,1,1])
  |> mutate(
    Size = D*scale(Data$Size),
    Tenure = D*scale(Data$Tenure),
    DistanceStation = D*scale(Data$DistanceStation),
    StructureSRC = D*scale(Data$StructureSRC),
    Reform = D*scale(Data$Reform),
    RoomNum = D*scale(Data$RoomNum),
    RoomL = D*scale(Data$RoomL),
    RoomD = D*scale(Data$RoomD),
    Kenpei = D*scale(Data$Kenpei),
    Youseki = D*scale(Data$Youseki)
  )
  ) |> 
  generics::tidy() |> 
  mutate(
    Method = "DML"
  ) |> 
  bind_rows(
    estimatr::lm_robust(
  DefineFormula,
  tibble(
    Y = Y - FitOLS$predictions$ml_l[,1,1],
    D = D - FitOLS$predictions$ml_m[,1,1])
  |> mutate(
    Size = D*scale(Data$Size),
    Tenure = D*scale(Data$Tenure),
    DistanceStation = D*scale(Data$DistanceStation),
    StructureSRC = D*scale(Data$StructureSRC),
    Reform = D*scale(Data$Reform),
    RoomNum = D*scale(Data$RoomNum),
    RoomL = D*scale(Data$RoomL),
    RoomD = D*scale(Data$RoomD),
    Kenpei = D*scale(Data$Kenpei),
    Youseki = D*scale(Data$Youseki)
  )
  ) |> 
  generics::tidy() |> 
  mutate(
    Method = "OLS"
  )
  ) |> 
  ggplot(
    aes(
      y = term,
      x = estimate,
      xmin = estimate - Q*std.error,
      xmax = estimate + Q*std.error,
      color = Method
    )
  ) +
  theme_bw() +
  geom_pointrange(
    position = position_dodge(width = 0.5)
  ) +
  geom_vline(
    xintercept = 0
  )
```
