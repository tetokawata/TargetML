---
title: "SlideR01"
format: 
  revealjs:
    html-math-method: katex
    css: styles.css
    slide-number: true
self-contained: true
self-contained-math: true
bibliography: ref.bib
toc: true
toc-depth: 2
execute: 
  warning: false
  message: false
  eval: true
  echo: true
---

## mlr3

- 教師付き学習の"メタ"パッケージ

- OOP

- インスタンス化を明示的に行う

## SetUp

```{r}
set.seed(111)
library(tidyverse)
library(mlr3verse)

Data <- arrow::read_parquet(
  "Public/Example.parquet"
)
```

## Define instance

```{r}
TreeDepth2 <- lrn("regr.rpart")

TreeDepth2$param_set$values$maxdepth <- 2

TreeDepth2$param_set$values$cp <- 0

TreeDepth2
```

## Define Task

```{r}
Task <- as_task_regr(
  x = Data,
  target = "Price"
  )

Task
```

## Fitting

```{r}
Group <- partition(
  Task,
  ratio = 0.8
  ) # Split sample

TreeDepth2$train(
  Task, 
  Group$train
  ) # Fit tree model
```

## Visualization

```{r}
rpart.plot::rpart.plot(TreeDepth2$model)
```

## Validation

```{r}
TreeDepth2$predict(
  Task,
  Group$test)$
  score(msr("regr.rsq"))
```

## Use benchmark_grid

```{r}
TreeDepth2 <- lrn("regr.rpart", id = "depth 2")

TreeDepth2$param_set$values$maxdepth <- 2

TreeDepth2$param_set$values$cp <- 0

TreeDepth10 <- lrn("regr.rpart", id = "depth 10")

TreeDepth10$param_set$values$maxdepth <- 10

TreeDepth10$param_set$values$cp <- 0
```

## Use benchmark_grid

```{r}
Design <- benchmark_grid(
  tasks = Task,
  learners = list(
    TreeDepth2,
    TreeDepth10
  ),
  resamplings = rsmp(
    "holdout",
    ratio = 0.8) # Training(8割)/Test(2割)へ分割
)

BenchMark <- benchmark(Design)
```

## Use benchmark_grid

```{r}
BenchMark$aggregate(msr("regr.rsq"))
```

