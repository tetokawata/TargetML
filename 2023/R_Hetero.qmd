---
title: "Example"
format: html
---

# SetUp

```{r SetUp}
set.seed(149)
pacman::p_load(
  tidyverse,
  mlr3verse,
  mlr3pipelines,
  mlr3extralearners,
  recipes
)
```

## Regression Learner

```{r SetLearner}
R2 <-  msr("regr.rsq") # R2で評価

CV <- rsmp(
  "holdout",
  ratio = 0.8) # 2分割交差検証

Terminal = trm("evals",
               n_evals = 20) # 20回の繰り返し評価

Tuner <- tnr("grid_search",
             resolution = 20) # 20回のグリッドサーチ

Mutate = po("mutate") # データ加工

Mutate$param_set$values$mutation = list(
  X1_2 = ~ X1*X1,
  X2_2 = ~ X2*X2,
  X3_2 = ~ X3*X3,
  X4_2 = ~ X4*X4,
  X5_2 = ~ X5*X5,
  X6_2 = ~ X6*X6
) # 二乗項と交差項の作成

Scale = po("scale")

RegLM <-  Mutate %>>% 
  Scale %>>% 
  lrn(
  "regr.lm",
  id = "RegLM"
  ) |> 
  as_learner()

RegRF <- lrn(
  "regr.ranger",
  id = "RefRF"
  )

RegBART <- lrn(
  "regr.bart",
  id = "BART"
)

RegStacking <- pipeline_stacking(
  list(
  RegRF,
  RegLM), 
  lrn(
    "regr.lm",
    id = "RegAggregate"
  ),
  use_features = FALSE,
  folds = 2) |> 
  as_learner()
```

## Classification Learner

```{r}
ProbOLS <- lrn("classif.log_reg",
  id = "ProbLM",
  predict_type = "prob"
)

ProbRF <- lrn(
  "classif.ranger",
  id = "ProbRanger",
  predict_type = "prob"
)

ProbBART <- lrn(
  "classif.bart",
  id = "ProbLASSO",
  predict_type = "prob")

ProbStacking <- pipeline_stacking(
  list(
    ProbRF,
    ProbOLS), 
  lrn(
    "classif.log_reg",
    id = "ProbSuperLearner"
  )
  ) |> 
  as_learner()
```


# Data

```{r}
Raw <- arrow::read_parquet("~/Dropbox/DataClean/RetailJPN/AllPrefectture.parquet") |> 
  filter(今後の利用目的 == "住宅") |> 
  filter(用途 == "住宅") |> 
  filter(改装 != "") |> 
  filter(間取り != "") |> 
  filter(都市計画 != "") |> 
  filter(最寄駅.名称 != "") |> 
  filter(都道府県名 == "東京都") |> 
  filter(str_detect(市区町村名, "区")) |> 
  filter(取引時点 |> 
           str_detect("４")) |> 
  filter(
    建物の構造 == "ＳＲＣ" |
      建物の構造 == "ＲＣ"
  ) |> 
  filter(
    間取り != "オープンフロア"
  ) |> 
  filter(
    間取り != "スタジオ"
  ) |> 
  filter(
    間取り != "メゾネット"
  ) |> 
  mutate(TradePeriod = str_sub(取引時点,1,4) |> 
           as.numeric()
         ) |> 
  filter(TradePeriod == 2016 |
           TradePeriod == 2021) |> 
  mutate(
    TempBuildYear = 
      str_sub(建築年,3,-2) |> 
      as.numeric(),
    TempGengo = str_sub(建築年,1,2)
    ) |> 
  mutate(
    BuildYear = if_else(
      TempGengo == "令和",
      TempBuildYear + 2018,
      TempBuildYear
      )
  ) |> 
  mutate(
    BuildYear = if_else(
      TempGengo == "平成",
      TempBuildYear + 1988,
      BuildYear
      )
  ) |> 
  mutate(
    BuildYear = if_else(
      TempGengo == "昭和",
      TempBuildYear + 1925,
      BuildYear
      )
  ) |> 
  mutate(
    Price = 取引価格.総額./(10^6),
    Tenure = TradePeriod - BuildYear,
    DistanceStation = 最寄駅.距離.分. |> as.numeric(),
    Size = 面積... |> as.numeric(),
    Youseki = 容積率... |> as.numeric(),
    Kenpei = 建ぺい率... |> as.numeric(),
    RoomNum = if_else(str_detect(間取り,"１"),1,0),
    RoomNum = if_else(str_detect(間取り,"２"),2,RoomNum),
    RoomNum = if_else(str_detect(間取り,"３"),3,RoomNum),
    RoomNum = if_else(str_detect(間取り,"４"),4,RoomNum),
    RoomNum = if_else(str_detect(間取り,"５"),5,RoomNum),
    RoomNum = if_else(str_detect(間取り,"６"),6,RoomNum),
    ZoneHouse = if_else(str_detect(都市計画,"住居"),1,0),
    ZoneBusiness = if_else(str_detect(都市計画,"商業"),1,0),
    ZoneFactory = if_else(str_detect(都市計画,"工業"),1,0),
    RoomK = if_else(str_detect(間取り,"Ｋ"),1,0),
    RoomL = if_else(str_detect(間取り,"Ｌ"),1,0),
    RoomD = if_else(str_detect(間取り,"Ｄ"),1,0),
    RoomS = if_else(str_detect(間取り,"Ｓ"),1,0),
    StructureSRC = if_else(建物の構造 == "ＳＲＣ",1,0),
    After = if_else(
      TradePeriod == 2021,
        1,
        0
    ),
    Reform = if_else(改装 == "改装済",1,0)
  ) |> 
  mutate(
    District = if_else(
      市区町村名 == "中央区" |
        市区町村名 == "港区" |
        市区町村名 == "千代田区",
      "CBD",
      市区町村名)
    ) |> 
  select(Price:District) |> 
  na.omit()

Data <- recipe(
  ~.,
  Raw
  ) |> 
  step_scale(
    Tenure,
    DistanceStation,
    Size,
    Youseki,
    Kenpei,
    RoomNum
  ) |> 
  step_dummy(District) |> 
  prep() |> 
  bake(new_data = NULL)


X <- Data |> 
  select(
    -Price,
    -After
  )

NameX <- names(X)
names(X) <- str_c("X",1:ncol(X))

Z <- Data |> 
  select(
    -Price,
    -After
    )

Y <- Data$Price

D <- Data$After
```

# Double ML with OLS

```{r}
Task <- DoubleML::double_ml_data_from_matrix(
  X = X,
  y = Y,
  d = D
)

DML_OLS <- DoubleML::DoubleMLIRM$new(
  Task,
  lrn("regr.lm"),
  lrn("classif.log_reg"),
  n_folds = 2
  )

DML_OLS$fit(store_predictions = TRUE)

DML_OLS
```


# DoubleML

```{r}
Task <- DoubleML::double_ml_data_from_matrix(
  X = X,
  y = Y,
  d = D
)

DML <- DoubleML::DoubleMLIRM$new(
  Task,
  RegStacking$clone(),
  ProbStacking$clone(),
  n_folds = 2
  )

DML$fit(store_predictions = TRUE)

DML
```

# Result

```{r}
tibble(
  estimate = DML_OLS$coef,
  std.error = DML_OLS$se,
  Method = "DML with OLS"
  ) |> 
  bind_rows(
    tibble(
  estimate = DML$coef,
  std.error = DML$se,
  Method = "DML"
  ) 
  ) |> 
  bind_rows(
    estimatr::lm_robust(
      Price ~ After,
      Data
    ) |> 
      generics::tidy() |> 
      filter(term != "(Intercept)") |> 
      mutate(Method = "Difference")
  ) |> 
  ggplot(
    aes(
      y = Method,
      x = estimate,
      xmin = estimate - 1.96*std.error,
      xmax = estimate + 1.96*std.error
    )
  ) +
  geom_vline(
    xintercept = 0
  ) +
  theme_bw() +
  geom_pointrange()
```

# BLP on CATE: District

```{r, dev='ragg_png'}
Z <- Data |> 
  select(starts_with("Distr"))

Q <- qnorm(1 - (0.05/(2*ncol(Z))))

Q10 <- qnorm(1 - (0.05/(2)))
estimatr::lm_robust(
  Y ~ .,
  Z |> 
    mutate(Y = DML$psi_b[,1,1])
  ) |> 
  generics::tidy() |> 
  filter(term != "(Intercept)") |> 
  filter(!is.na(estimate)) |> 
  mutate(
    p.value = p.adjust(p.value,"holm")
  ) |> 
  mutate(
    Error = if_else(
      p.value <= 0.05,
      "Less than 5%",
      "Larger than 5%"
    )
  ) |> 
  ggplot(
    aes(
      x = estimate,
      y = term,
      xmin = estimate - Q*std.error,
      xmax = estimate + Q*std.error,
      color = Error
    )
  ) +
  theme_bw() +
  geom_vline(xintercept = 0) +
  geom_pointrange() +
  geom_pointrange(
    aes(
      xmin = estimate - Q10*std.error,
      xmax = estimate + Q10*std.error,
      color = Error
    ),
    linewidth = 1.5
  )
```


```{r, dev='ragg_png'}
Q <- qnorm(1 - (0.05/(2*ncol(X))))

Q10 <- qnorm(1 - (0.05/(2)))
estimatr::lm_robust(
  Y ~ .,
  X |> 
    mutate(Y = DML$psi_b[,1,1])
  ) |> 
  generics::tidy() |> 
  filter(term != "(Intercept)") |> 
  filter(!is.na(estimate)) |> 
  mutate(
    p.value = p.adjust(p.value,"holm")
  ) |> 
  mutate(
    Error = if_else(
      p.value <= 0.05,
      "Less than 5%",
      "Larger than 5%"
    )
  ) |> 
  ggplot(
    aes(
      x = estimate,
      y = term,
      xmin = estimate - Q*std.error,
      xmax = estimate + Q*std.error,
      color = Error
    )
  ) +
  theme_bw() +
  geom_vline(xintercept = 0) +
  geom_pointrange() +
  geom_pointrange(
    aes(
      xmin = estimate - Q10*std.error,
      xmax = estimate + Q10*std.error,
      color = Error
    ),
    linewidth = 1.5
  )

NameX
```

