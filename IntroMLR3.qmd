---
title: "mlr3入門"
author: "川田恵介"
format: revealjs
---

## おすすめ

```{r}
pacman::p_load(DiagrammeR)
```


- R入門

    - [R for Data Science](https://r4ds.had.co.nz/)

    - [Advanced R](https://adv-r.hadley.nz/)

- mlr3入門

    - [Package Page](https://mlr3.mlr-org.com/)

- [講義に合わせたページ](https://github.com/tetokawata/BookEmiricalSocialML)

## SetUp

```{r}
#| echo: true
library(mlr3verse) # Machine Learning
library(tidyverse) # PreProcess

Data <- read_csv("ExampleData/Example.csv") # Import Data
```

## mlr3 EcoSystem

```{r}
grViz("digraph dot {
      graph [rankdir = UB,color = crimson]
      edge [color=black]
      node [shape = rectangle, color = darkslategray]
      A1 [label = 'rpart package']
      A2 [label = 'ranger package']
      A3 [label = 'glmnet package']
      B1 [label = 'mlr3']
      C1 [label = 'DoubleML']
      E [label = 'UniformInference, bootstrap']
      A1,A2,A3 -> B1 -> C1
      E -> C1
      {rank = same; E;C1}
      }")
```

## RoadMap

```{r}
grViz("digraph dot {
      graph [rankdir = UB,color = crimson]
      edge [color=black]
      node [shape = rectangle, color = darkslategray]
      A1 [label = 'lrn: Define Learner']
      A2 [label = 'as_task_regr: Define Regression Task']
      A3 [label = 'msr: Define Evaluation']
      A4 [label = 'rsmp: Define Resampling']
      B1 [label = 'Learning']
      B2 [label = 'HyperParamter Tuning']
      C [label = 'Evaluation']
      A1,A2 -> B1 -> C
      B2 -> B1
      A3,A4 -> B2
      A3,A4 -> C
      {rank = same;A1;A2;A3;A4}
      {rank = same;B1;B2}
      }")

```


## Define 

```{r}
#| echo: true
Tree <- lrn("regr.rpart") # Define Tree Learner

Task <- as_task_regr(Data,
                     target = "Price") # Define Price Prediction Task

R2 <- msr("regr.rsq") # Define R2
```

## Learning

```{r}
#| echo: true

Tree$train(Task)
```

## Visualization

```{r}
#| echo: true

rpart.plot::rpart.plot(Tree$model)
```

## HyperParameter

```{r}
#| echo: true
Tree$param_set # Check default hyper parameters
```

## Set NewAlgorithm

```{r}
#| echo: true
ShallowTree <- Tree$clone(deep = TRUE) # Deep copy

ShallowTree$param_set$values$maxdepth <- 2 # Set MaxDepth

ShallowTree$train(Task)

rpart.plot::rpart.plot(ShallowTree$model)
```

## Prediction

```{r}
#| echo: true
Tree$predict(Task) # 推定に用いたデータへの予想
```


## Evaluation

```{r}
#| echo: true

Tree$predict(Task)$score(R2)
```

